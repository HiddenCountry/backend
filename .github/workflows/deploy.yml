name: Build & Deploy (JAR → EC2)

on:
  push:
    branches: [ "chore/#9_cicd" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Grant Gradle wrapper permissions
        run: chmod +x ./gradlew

      - name: Build (skip tests for speed)
        run: ./gradlew clean bootJar -x test --no-daemon

      # build/libs/*.jar → /srv/hiddencountry/ (루트로 바로 복사)
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: build/libs/*.jar
          target: /srv/hiddencountry/
          overwrite: true

      # Stop → relink(절대경로) → Start → 포트/헬스 체크
      - name: Restart service on EC2 (safe stop → relink → start)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            APP_DIR="/srv/hiddencountry"
            SVC="hiddencountry"
            PORT="8080"

            echo "[DBG] Check Java"
            if ! command -v java >/dev/null 2>&1; then
              echo "::error::Java not installed on EC2. Install openjdk-17-jre-headless once and retry."
              exit 1
            fi
            java -version

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            ls -al || true

            # 최신 JAR 결정 (루트 우선, 없으면 재귀 검색)
            NEW_JAR="$(ls -1t *.jar 2>/dev/null | head -n1 || true)"
            if [ -z "$NEW_JAR" ]; then
              NEW_JAR_PATH=$(find "$APP_DIR" -type f -name "*.jar" -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | awk '{print $2}')
              if [ -n "$NEW_JAR_PATH" ]; then
                NEW_JAR=$(basename "$NEW_JAR_PATH")
                cp -f "$NEW_JAR_PATH" "./$NEW_JAR"
              else
                echo "::error::No JAR found under $APP_DIR"
                exit 1
              fi
            fi
            echo "[DBG] NEW_JAR=$NEW_JAR"

            # 서비스 정지(링크 교체 중 레이스 방지)
            echo "[DBG] Stop service: $SVC"
            sudo systemctl stop "$SVC" || true

            # 이전 링크 백업(선택)
            if [ -L app.jar ]; then
              PREV_TARGET=$(readlink -f app.jar || true)
              [ -n "$PREV_TARGET" ] && [ -f "$PREV_TARGET" ] && cp -f "$PREV_TARGET" "app.jar.prev.$(date +%Y%m%d%H%M%S).jar" || true
            fi

            # 🔸 절대경로 링크로 고정(오탐 방지)
            ABS_NEW="$(readlink -f "$NEW_JAR")"
            chmod 644 "$ABS_NEW" || true
            ln -sfn "$ABS_NEW" app.jar
            echo "[DBG] app.jar -> $(readlink -f app.jar)"
            if [ ! -r app.jar ]; then
              echo "::error::app.jar is not readable"
              exit 1
            fi

            # 서비스 시작
            echo "[DBG] Start service: $SVC"
            sudo systemctl daemon-reload
            sudo systemctl start "$SVC"

            # 포트 리스닝 대기 (최대 120초)
            echo "[DBG] Wait for :$PORT listening (up to 120s)"
            for i in {1..60}; do
              sleep 2
              if ss -ltnp | grep -q ":$PORT"; then
                echo "[DBG] Port $PORT is listening."
                break
              fi
              if ! sudo systemctl is-active --quiet "$SVC"; then
                echo "[DBG] Service not active. Recent logs:"
                sudo journalctl -u "$SVC" -n 120 --no-pager || true
              fi
              if [ $i -eq 60 ]; then
                echo "::error::Port $PORT not listening after 120s."
                sudo systemctl status "$SVC" --no-pager || true
                sudo journalctl -u "$SVC" -n 300 --no-pager || true
                exit 1
              fi
            done

            # 헬스체크: 200 or 본문에 'UP' 포함 시 성공
            echo "[DBG] Health check /actuator/health (up to 90s)"
            for i in {1..30}; do
              sleep 3
              RESP=$(curl -fsS -H "Accept: application/json" -w " HTTP_CODE:%{http_code}" http://127.0.0.1:$PORT/actuator/health || true)
              BODY="${RESP% HTTP_CODE:*}"
              CODE="${RESP##*HTTP_CODE:}"
              echo "[DBG] health code=$CODE body=$BODY"

              if [ "$CODE" = "200" ]; then
                echo "$BODY" | grep -qi '"status"[[:space:]]*:[[:space:]]*"UP"' && { echo "Health OK (JSON)"; exit 0; }
                echo "$BODY" | grep -qi '\bUP\b' && { echo "Health OK (TEXT)"; exit 0; }
              fi

              if ! sudo systemctl is-active --quiet "$SVC"; then
                echo "[DBG] Service crashed during health wait. Logs:"
                sudo journalctl -u "$SVC" -n 300 --no-pager || true
                break
              fi

              if [ $i -eq 30 ]; then
                echo "::warning::Health endpoint not confirmed UP within 90s."
              fi
            done

            # 헬스 미확인이라도 서비스 살아있고 포트 리슨 중이면 성공 처리
            if ss -ltnp | grep -q ":$PORT" && sudo systemctl is-active --quiet "$SVC"; then
              echo "::notice::Service is listening on :$PORT but health endpoint was not confirmed. Treating as success."
              exit 0
            fi

            # 진짜 실패(다운/포트 미리스닝)만 롤백
            echo "[DBG] Rolling back to previous JAR because service is not healthy AND not listening."
            PREV=$(ls -1t app.jar.prev.*.jar 2>/dev/null | head -n1 || true)
            if [ -n "$PREV" ]; then
              ln -sfn "$PREV" app.jar
              sudo systemctl restart "$SVC"
              echo "[DBG] Rolled back. Current app.jar -> $(readlink -f app.jar)"
              exit 1
            else
              echo "::warning::No prev jar to roll back."
              exit 1
            fi
