name: Build & Deploy (JAR → EC2)

on:
  push:
    branches: [ "chore/#9_cicd" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Grant Gradle wrapper permissions
        run: chmod +x ./gradlew

      - name: Build (skip tests for speed)
        run: ./gradlew clean bootJar -x test --no-daemon

      - name: Find built JAR
        id: jar
        run: |
          JAR_PATH=$(ls -1 build/libs/*.jar | head -n1)
          JAR_NAME=$(basename "$JAR_PATH")
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "jar_name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "Found: $JAR_NAME"

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ env.JAR_PATH }}
          target: /srv/hiddencountry/
          overwrite: true

      - name: Restart service on EC2 (safe stop → relink → start + cleanup)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: JAR_NAME
          # 백업은 최근 3개만 유지로 변경
          script: |
            set -euo pipefail
            APP_DIR="/srv/hiddencountry"
            SVC="hiddencountry"
            PORT="8080"

            cleanup_keep_backups() {
              echo "[DBG] Cleanup: keep last 3 backups"
              # 최근 3개의 백업만 유지(4번째 이후 삭제)
              ls -1t app.jar.prev.*.jar 2>/dev/null | tail -n +4 | xargs -r rm -f || true

              echo "[DBG] Cleanup: keep current + 2 newest regular jars (exclude backups)"
              local CUR
              CUR="$(readlink -f app.jar || true)"
              mapfile -t JARS < <(find "$APP_DIR" -maxdepth 1 -type f -name "*.jar" ! -name "app.jar.prev.*.jar" -printf "%T@ %p\n" 2>/dev/null | sort -nr | awk '{print $2}')
              if [ "${#JARS[@]}" -gt 2 ]; then
                for J in "${JARS[@]:2}"; do
                  [ -n "$CUR" ] && [ "$(readlink -f "$J")" = "$CUR" ] && continue
                  rm -f "$J" || true
                done
              fi
            }

            success_and_exit() {
              cleanup_keep_backups
              echo "✅ Deploy success."
              exit 0
            }

            echo "[DBG] Check Java"
            if ! command -v java >/dev/null 2>&1; then
              echo "::error::Java not installed on EC2. Install openjdk-17-jre-headless once and retry."
              exit 1
            fi

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            ls -al || true

            # 정확한 파일명 존재 확인 (워크플로우에서 전달)
            if [ -z "${JAR_NAME:-}" ]; then
              echo "::error::JAR_NAME was not provided to SSH step."
              exit 1
            fi

            if [ ! -f "$JAR_NAME" ]; then
              echo "::warning::$JAR_NAME not found in $APP_DIR. Fallback search."
              NEW_JAR=$(ls -1t *.jar 2>/dev/null | grep -v '^app\.jar\.prev\.' | head -n1 || true)
              if [ -z "${NEW_JAR:-}" ]; then
                NEW_JAR_PATH=$(find "$APP_DIR" -type f -name "*.jar" ! -name "app.jar.prev.*.jar" -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | awk '{print $2}')
                if [ -n "${NEW_JAR_PATH:-}" ]; then
                  NEW_JAR=$(basename "$NEW_JAR_PATH")
                  cp -f "$NEW_JAR_PATH" "./$NEW_JAR"
                else
                  echo "::error::No valid JAR found under $APP_DIR"
                  exit 1
                fi
              fi
              TARGET_JAR="$NEW_JAR"
            else
              TARGET_JAR="$JAR_NAME"
            fi

            echo "[DBG] TARGET_JAR=$TARGET_JAR"

            # stop → relink(절대경로) → start
            sudo systemctl stop "$SVC" || true

            if [ -L app.jar ]; then
              PREV_TARGET=$(readlink -f app.jar || true)
              [ -n "${PREV_TARGET:-}" ] && [ -f "$PREV_TARGET" ] && cp -f "$PREV_TARGET" "app.jar.prev.$(date +%Y%m%d%H%M%S).jar" || true
            fi

            ABS_NEW="$(readlink -f "$TARGET_JAR")"
            chmod 644 "$ABS_NEW" || true
            ln -sfn "$ABS_NEW" app.jar
            echo "[DBG] app.jar -> $(readlink -f app.jar)"
            if [ ! -r app.jar ]; then
              echo "::error::app.jar is not readable"
              exit 1
            fi

            sudo systemctl daemon-reload
            sudo systemctl start "$SVC"

            echo "[DBG] Wait for :$PORT listening (up to 120s)"
            for i in {1..60}; do
              sleep 2
              if ss -ltnp | grep -q ":$PORT"; then
                echo "[DBG] Port $PORT is listening."
                break
              fi
              if ! sudo systemctl is-active --quiet "$SVC"; then
                echo "[DBG] Service not active. Recent logs:"
                sudo journalctl -u "$SVC" -n 120 --no-pager || true
              fi
              if [ $i -eq 60 ]; then
                echo "::error::Port $PORT not listening after 120s."
                sudo systemctl status "$SVC" --no-pager || true
                sudo journalctl -u "$SVC" -n 300 --no-pager || true
                exit 1
              fi
            done

            echo "[DBG] Health check (accept 200/401/403)"
            RESP=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$PORT/actuator/health || true)
            if [ "$RESP" = "200" ] || [ "$RESP" = "401" ] || [ "$RESP" = "403" ]; then
              success_and_exit
            fi

            # fallback: 서비스 살아있으면 성공
            if ss -ltnp | grep -q ":$PORT" && sudo systemctl is-active --quiet "$SVC"; then
              success_and_exit
            fi

            # rollback
            echo "[DBG] Rolling back..."
            PREV=$(ls -1t app.jar.prev.*.jar 2>/dev/null | head -n1 || true)
            if [ -n "${PREV:-}" ]; then
              ln -sfn "$PREV" app.jar
              sudo systemctl restart "$SVC"
              echo "[DBG] Rolled back. Current app.jar -> $(readlink -f app.jar)"
              exit 1
            else
              echo "::warning::No prev jar to roll back."
              exit 1
            fi
