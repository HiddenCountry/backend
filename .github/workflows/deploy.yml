name: Build & Deploy (JAR → EC2)

on:
  push:
    branches: [ "chore/#9_cicd" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Grant Gradle wrapper permissions
        run: chmod +x ./gradlew

      - name: Build (skip tests for speed)
        run: ./gradlew clean bootJar -x test --no-daemon

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: build/libs/*.jar
          target: /srv/hiddencountry/
          overwrite: true

      - name: Restart service on EC2 (safe stop → relink → start + cleanup)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/srv/hiddencountry"
            SVC="hiddencountry"
            PORT="8080"

            cleanup_keep_backups() {
              echo "[DBG] Cleanup: keep last 5 backup jars (app.jar.prev.*.jar)"
              # Keep the 5 most recent backups, delete the rest
              ls -1t app.jar.prev.*.jar 2>/dev/null | tail -n +6 | xargs -r rm -f || true

              echo "[DBG] Cleanup: keep current + 2 newest regular jars (not backups)"
              local CUR
              CUR="$(readlink -f app.jar || true)"
              # List regular JARs (exclude backups), newest first
              mapfile -t JARS < <(find "$APP_DIR" -maxdepth 1 -type f -name "*.jar" ! -name "app.jar.prev.*.jar" -printf "%T@ %p\n" 2>/dev/null | sort -nr | awk '{print $2}')
              # Keep first 2 newest; delete older ones except the current link target
              if [ "${#JARS[@]}" -gt 2 ]; then
                for J in "${JARS[@]:2}"; do
                  # Never delete the file currently pointed to by app.jar
                  if [ -n "$CUR" ] && [ "$(readlink -f "$J")" = "$CUR" ]; then
                    continue
                  fi
                  rm -f "$J" || true
                done
              fi
            }

            success_and_exit() {
              cleanup_keep_backups
              echo "✅ Deploy success."
              exit 0
            }

            echo "[DBG] Check Java"
            if ! command -v java >/dev/null 2>&1; then
              echo "::error::Java not installed on EC2. Install openjdk-17-jre-headless once and retry."
              exit 1
            fi
            java -version

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            ls -al || true

            # Choose newest JAR (root first, else recursive)
            NEW_JAR="$(ls -1t *.jar 2>/dev/null | head -n1 || true)"
            if [ -z "${NEW_JAR:-}" ]; then
              NEW_JAR_PATH=$(find "$APP_DIR" -type f -name "*.jar" -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | awk '{print $2}')
              if [ -n "${NEW_JAR_PATH:-}" ]; then
                NEW_JAR=$(basename "$NEW_JAR_PATH")
                cp -f "$NEW_JAR_PATH" "./$NEW_JAR"
              else
                echo "::error::No JAR found under $APP_DIR"
                exit 1
              fi
            fi
            echo "[DBG] NEW_JAR=$NEW_JAR"

            # Stop service to avoid race during relink
            echo "[DBG] Stop service: $SVC"
            sudo systemctl stop "$SVC" || true

            # Backup previous target (optional)
            if [ -L app.jar ]; then
              PREV_TARGET=$(readlink -f app.jar || true)
              [ -n "${PREV_TARGET:-}" ] && [ -f "$PREV_TARGET" ] && cp -f "$PREV_TARGET" "app.jar.prev.$(date +%Y%m%d%H%M%S).jar" || true
            fi

            # Use absolute path for the new target to prevent path confusions
            ABS_NEW="$(readlink -f "$NEW_JAR")"
            chmod 644 "$ABS_NEW" || true
            ln -sfn "$ABS_NEW" app.jar
            echo "[DBG] app.jar -> $(readlink -f app.jar)"
            if [ ! -r app.jar ]; then
              echo "::error::app.jar is not readable"
              exit 1
            fi

            # Start service
            echo "[DBG] Start service: $SVC"
            sudo systemctl daemon-reload
            sudo systemctl start "$SVC"

            # Wait for port listening (up to 120s)
            echo "[DBG] Wait for :$PORT listening (up to 120s)"
            for i in {1..60}; do
              sleep 2
              if ss -ltnp | grep -q ":$PORT"; then
                echo "[DBG] Port $PORT is listening."
                break
              fi
              if ! sudo systemctl is-active --quiet "$SVC"; then
                echo "[DBG] Service not active. Recent logs:"
                sudo journalctl -u "$SVC" -n 120 --no-pager || true
              fi
              if [ $i -eq 60 ]; then
                echo "::error::Port $PORT not listening after 120s."
                sudo systemctl status "$SVC" --no-pager || true
                sudo journalctl -u "$SVC" -n 300 --no-pager || true
                exit 1
              fi
            done

            # Health check (200 or body contains 'UP')
            echo "[DBG] Health check /actuator/health (up to 90s)"
            for i in {1..30}; do
              sleep 3
              RESP=$(curl -fsS -H "Accept: application/json" -w " HTTP_CODE:%{http_code}" http://127.0.0.1:$PORT/actuator/health || true)
              BODY="${RESP% HTTP_CODE:*}"
              CODE="${RESP##*HTTP_CODE:}"
              echo "[DBG] health code=$CODE body=$BODY"

              if [ "$CODE" = "200" ]; then
                echo "$BODY" | grep -qi '"status"[[:space:]]*:[[:space:]]*"UP"' && { echo "Health OK (JSON)"; success_and_exit; }
                echo "$BODY" | grep -qi '\bUP\b' && { echo "Health OK (TEXT)"; success_and_exit; }
              fi

              if ! sudo systemctl is-active --quiet "$SVC"; then
                echo "[DBG] Service crashed during health wait. Logs:"
                sudo journalctl -u "$SVC" -n 300 --no-pager || true
                break
              fi

              if [ $i -eq 30 ]; then
                echo "::warning::Health endpoint not confirmed UP within 90s."
              fi
            done

            # If service is alive and port is listening, treat as success (avoid false negatives)
            if ss -ltnp | grep -q ":$PORT" && sudo systemctl is-active --quiet "$SVC"; then
              echo "::notice::Service is listening on :$PORT but health endpoint was not confirmed. Treating as success."
              success_and_exit
            fi

            # Real failure → rollback
            echo "[DBG] Rolling back to previous JAR because service is not healthy AND not listening."
            PREV=$(ls -1t app.jar.prev.*.jar 2>/dev/null | head -n1 || true)
            if [ -n "${PREV:-}" ]; then
              ln -sfn "$PREV" app.jar
              sudo systemctl restart "$SVC"
              echo "[DBG] Rolled back. Current app.jar -> $(readlink -f app.jar)"
              exit 1
            else
              echo "::warning::No prev jar to roll back."
              exit 1
            fi
